#!/usr/bin/env python

import os
import sys
from os import rename
from os.path import isfile, join, dirname, abspath, basename, exists
import click
import subprocess

from ngs_utils.call_process import run
from ngs_utils.file_utils import verify_file, safe_mkdir, splitext_plus
from ngs_utils import logger
from ngs_utils.logger import info
from ngs_utils.utils import set_locale; set_locale()
from umccrise import package_path

@click.command()
@click.argument('vcf_path', type=click.Path(exists=True))
@click.argument('cnv_path', type=click.Path(exists=True), required=False)
@click.option('-g', 'genome')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-s', 'sample')
@click.option('--germline', is_flag=True)
@click.option('--docker/--no-docker', 'use_docker', is_flag=True, default=None)
@click.option('--pcgr-dir', type=click.Path(exists=True), help='Path to PCGR installation (defaults are known for spartan and raijin)')
def main(vcf_path, cnv_path=None, output_dir=None, genome='GRCh37', sample=None, germline=False, use_docker=None, pcgr_dir=None):

    if not pcgr_dir:
        from hpc_utils.hpc import find_loc
        loc = find_loc()
        pcgr_dir = loc.pcgr_dir
        if not pcgr_dir:
            logger.critical(f'PCGR is not found on the system "{loc.name}".'
                            f' Please, provide the path to PCGR installation with --pcgr-dir. '
                            f' To install it, pull `git clone https://github.com/vladsaveliev/pcgr`'
                            f' and run `bash pcgr/install_no_docker/install.sh`')
    output_dir = output_dir or 'pcgrred'
    output_dir = abspath(output_dir)
    safe_mkdir(output_dir)
    logger.init(log_fpath_=join(output_dir, 'pcgr.log'), save_previous=True)

    somatic_toml = join(package_path(), 'pcgr', 'pcgr_configuration_somatic.toml')
    germline_toml = join(package_path(), 'pcgr', 'pcgr_configuration_normal.toml')
    sample = sample or splitext_plus(basename(vcf_path))[0]
    pcgr_genome = "grch38" if genome in ["hg38", "GRCh38"] else "grch37"
    expected_report_path = join(output_dir, f'{sample}.pcgr_acmg.{pcgr_genome}.html')
    renamed_report_path = join(output_dir, f'{sample}.pcgr_acmg.html')

    print('use_docker:', use_docker)
    if use_docker is None:
        check_docker_command = 'docker images -q sigven/pcgr'
        try:
            output = subprocess.check_output(check_docker_command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            logger.warn('Docker is not installed, trying running in --no-docker mode')
        else:
            if len(output) == 0:
                logger.warn('Docker image sigven/pcgr not found, trying running in --no-docker mode')
                use_docker = False
            else:
                use_docker = True

    rlibs_env = ''
    if not use_docker:
        r_pcgrr_dir_ori = join(pcgr_dir, 'src', 'R', 'pcgrr')
        r_pcgrr_dir_dst = safe_mkdir(join(output_dir, 'work', sample))
        info(f'Installing a copy of the "pcgrr" package to avoid the race condition for template tmp files: '
             f'{r_pcgrr_dir_ori} -> {r_pcgrr_dir_dst}')
        os.environ['R_LIBS'] = r_pcgrr_dir_dst + ':' + os.environ.get('R_LIBS', '')
        rlibs_env = f'R_LIBS={r_pcgrr_dir_dst}'
        run(f'{rlibs_env} R -e "library(devtools); devtools::install(\'{r_pcgrr_dir_ori}\')"')

    cmd = (f'{rlibs_env}'
           f' {join(pcgr_dir, "pcgr.py")}'
           f' --input_vcf {abspath(vcf_path)}'
           f' {("--input_cna " + abspath(cnv_path)) if cnv_path else ""}'
           f' {pcgr_dir}'
           f' {output_dir}'
           f' {pcgr_genome}'
           f' {somatic_toml if not germline else germline_toml}'
           f' {sample}'
           f' {" --docker-uid root" if use_docker else " --no-docker"}'
           f' --force_overwrite'
    )

    print(cmd)
    exit_code = subprocess.call(cmd, shell=True)
    if exit_code != 0:
        sys.stderr.write('--------\n')
        sys.stderr.write(f'Error running PCGR.\n')
        sys.exit(exit_code)

    if isfile(expected_report_path):
        print(f'Result generated as {expected_report_path}. Renaming to {renamed_report_path}')
        rename(expected_report_path, renamed_report_path)
    if isfile(renamed_report_path):
        print(f'PCGR report: {renamed_report_path}')


if __name__ == '__main__':
    main()
